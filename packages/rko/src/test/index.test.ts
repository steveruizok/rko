import getStroke, { getStrokePoints } from '../'

const points = [
  [-0.20210597826090293, 0.08050271739131176],
  [-0.3031589673913402, 0.12075407608699606],
  [0.1463145380434412, -0.8591202445651902],
  [1.371051290760846, -2.849057404891255],
  [2.9834196671195343, -4.844025985054316],
  [6.289603855298878, -8.341510275135875],
  [9.442695949388536, -12.590252420176625],
  [13.51924199643338, -18.214623492697],
  [20.057515019955787, -28.52680902895719],
  [26.826651531717005, -37.68290179708731],
  [33.71121978759763, -48.260948181152344],
  [40.653503915537925, -59.54997137318486],
  [48.124645979508074, -72.19448296920109],
  [55.86021701149315, -84.51673876720923],
  [63.7280025274857, -97.67786666621328],
  [71.16189528548196, -109.25843061571533],
  [75.87884166448009, -117.04871259046638],
  [81.23731485397914, -125.44385357784188],
  [85.91655144872868, -133.14142407152963],
  [90.25616974610344, -139.9902093183735],
  [94.92597889479086, -145.91460194179547],
  [98.76088346913454, -151.87679825350642],
  [103.17833575630638, -158.8578964093619],
  [106.8870618998923, -164.8484454872896],
  [110.74142497168529, -170.3437200262535],
  [113.66860650758176, -174.0913572957354],
  [116.63219727552999, -177.9651759304764],
  [119.11399265950408, -181.9020852478469],
  [121.35489035149115, -184.87053990653214],
  [122.97533919748466, -187.35476723587476],
  [124.28556362048144, -189.09688090054607],
  [124.94067583197986, -190.46793773288175],
  [125.76823193772904, -191.15346614904956],
  [126.18200999060363, -191.49623035713347],
  [126.38889901704093, -191.6676124611754],
  [126.4923435302596, -189.75330351319639],
  [126.54406578686891, -186.79614903920685],
  [126.56992691517357, -182.81757180221211],
  [126.5828574793259, -177.32828318371475],
  [126.58932276140203, -170.08363887446603],
  [126.59255540244013, -160.9613167198417],
  [125.5941717229592, -149.9001556425295],
  [122.59497988321871, -131.36957510387344],
  [120.09538396334844, -117.60428483454541],
  [116.84558600341333, -102.2216396998814],
  [113.72068702344578, -85.53031713254938],
  [110.15823753346203, -67.18465584888338],
  [106.37701278847013, -49.51182520705038],
  [102.4864004159742, -31.675409886133878],
  [99.04109422972621, -15.257202225675655],
  [96.81844113660222, -0.548098395446516],
  [94.70711459004022, 13.306453519668025],
  [92.65145131675919, 26.733729477225324],
  [91.12361968011871, 38.94736745600392],
  [90.35970386179847, 49.55418644539327],
  [89.47774595263834, 59.35759594008789],
  [89.03676699805825, 68.75930068743526],
  [88.81627752076824, 75.46015306110894],
  [88.70603278212323, 81.31057924794584],
  [88.6509104128007, 87.23579234136423],
  [88.62334922813946, 92.69839888807348],
  [88.60956863580881, 96.92970216142805],
  [88.60267833964352, 100.54535379810534],
  [88.59923319156084, 102.85317961644398],
  [88.59751061751953, 105.0070925256133],
  [88.59664933049888, 106.08404898019796],
  [88.59621868698852, 106.6225272074903],
  [88.59600336523337, 107.39176632113652],
  [88.5958957043558, 107.77638587795957],
  [88.59584187391701, 107.4686956563711],
  [88.59581495869762, 104.81485054557686],
  [87.59580150108795, 99.98792799017974],
  [85.59579477228309, 93.57446671248124],
  [83.09579140788065, 85.86773607363193],
  [80.34578972567945, 77.51437075420733],
  [76.47078888457884, 67.83768809449498],
  [72.53328846402852, 56.499346764638744],
  [67.06453825375337, 43.830176099710684],
  [61.83016314861581, 31.995590767246654],
  [56.712975596047016, 20.57829810101464],
  [51.15438181976262, 8.869651767898631],
  [46.37508493162042, -2.4846713986593727],
  [41.98543648754932, -12.661832981938346],
  [37.79061226551377, -21.75041377357786],
  [33.693200154496, -30.79470416939762],
  [30.14449409898711, -38.8168493673075],
  [27.370141071232666, -44.827921966262466],
  [24.982964557355444, -49.83345826573992],
  [22.78937630041682, -54.83622641547868],
  [19.69258217194752, -59.83761049034803],
  [17.64418510771287, -63.33830252778273],
  [15.619986575595561, -66.08864854650005],
  [14.607887309536892, -67.96382155585871],
  [13.601837676507557, -69.40140806053807],
  [13.098812859992876, -70.62020131287773],
  [12.84730045173555, -71.22959793904755],
  [12.221544247606886, -71.53429625213244],
]

describe('The algorithm.', () => {
  it('It works with number pairs.', () => {
    const stroke = getStroke([
      [0, 0],
      [10, 0],
      [20, 0],
      [25, 5],
      [30, 5],
    ])
    expect(Array.isArray(stroke)).toBeTruthy()
  })

  it('It works with point pairs.', () => {
    const stroke = getStroke([
      { x: 0, y: 0 },
      { x: 10, y: 0 },
      { x: 20, y: 0 },
      { x: 25, y: 5 },
      { x: 30, y: 5 },
    ])
    expect(Array.isArray(stroke)).toBeTruthy()
  })

  it('It produces the same result with either input.', () => {
    const strokeA = getStroke([
      [0, 0],
      [10, 0],
      [20, 0],
      [25, 5],
      [30, 5],
    ])
    const strokeB = getStroke([
      { x: 0, y: 0 },
      { x: 10, y: 0 },
      { x: 20, y: 0 },
      { x: 25, y: 5 },
      { x: 30, y: 5 },
    ])
    expect(JSON.stringify(strokeA) === JSON.stringify(strokeB)).toBeTruthy()
  })

  it('Caps points', () => {
    const stroke = getStroke([
      [10, 200],
      [10, 0],
    ])

    expect(stroke.length > 4).toBeTruthy()
  })

  it('Succeeds on tricky points', () => {
    expect(JSON.stringify(getStroke(points)).includes('null')).toBeFalsy()
  })

  it('Removes any duplicates', () => {
    const pointsWithDuplicates = [
      [0, 0],
      [0, 0],
      [0, 0],
      [0, 0],
      [0, 0],
      [10, 10],
      [10, 10],
      [10, 10],
      [10, 10],
      [10, 10],
      [100, 100],
      [100, 100],
      [100, 100],
      [100, 100],
      [100, 100],
      [100, 100],
      [0, 0],
      [0, 0],
    ]

    const strokePoints = getStrokePoints(pointsWithDuplicates)

    expect(getStroke(pointsWithDuplicates)).toMatchSnapshot(
      'stroke with duplicates removed'
    )

    expect(strokePoints).toMatchSnapshot(
      'stroke-points with duplicates removed'
    )
  })

  it('Solves a stroke with only one point.', () => {
    const stroke = getStroke([[1, 1, 0]], {
      size: 1,
      thinning: 0.6,
      smoothing: 0.5,
      streamline: 0.5,
      simulatePressure: true,
      last: false,
    })

    expect(stroke).toMatchSnapshot()

    expect(Number.isNaN([0][0])).toBe(false)
  })
})
